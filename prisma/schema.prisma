// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// conf

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// authentcation

model User {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  email     String     @unique
  password  String
  firstName String
  lastName  String
  photoURL  String?
  createdAt DateTime   @default(now())
  exchanges Exchange[]
  trades    Trade[]
  rules     Rule[]
  accounts  Account[]
  sessions  Session[]
  comments  Comment[]

  @@map("users")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

// accounts details

model Rule {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  content String
  ownerID String @db.ObjectId
  owner   User   @relation(fields: [ownerID], references: [id])

  @@map("rules")
}

model Trade {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  account   Exchange  @relation(fields: [accountId], references: [id])
  accountId String    @db.ObjectId
  trader    User      @relation(fields: [traderID], references: [id])
  traderID  String    @db.ObjectId
  createdAt DateTime  @default(now())
  symbol    String
  type      String
  margin    String
  date      DateTime
  status    String
  size      Int
  reason    String
  comments  Comment[]

  @@map("trades")
}

model Comment {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  trade   Trade  @relation(fields: [tradeID], references: [id])
  tradeID String @db.ObjectId
  owner   User   @relation(fields: [ownerID], references: [id])
  ownerID String @db.ObjectId
}

model Exchange {
  id       String  @id @default(auto()) @map("_id") @db.ObjectId
  owner    User    @relation(fields: [ownerID], references: [id])
  ownerID  String  @db.ObjectId
  trades   Trade[]
  balance  Int
  exchange String

  @@map("exchange")
}
